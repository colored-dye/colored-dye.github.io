<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github Clone加速</title>
    <url>/2021/03/26/Github-Clone%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p>有从Github Git Clone一些项目的需求，比如说克隆<code>riscv-toolchain</code>的Repository，但是6G多的仓库下起来实在是太慢了。在网上找到一些加速Git Clone的方法，供日后参考。个人感觉好用的顺序大致是从前向后递减吧。</p>
<span id="more"></span>

<ol>
<li><p>URL修改</p>
<ol>
<li><p>加后缀</p>
<p> 将<code>github.com</code>改为<code>github.com.cnpmjs.org</code>. 这个似乎是和<code>npm</code>相关的，提供私有的npm registry.</p>
</li>
<li><p>镜像网站</p>
<p> <code>https://hub.fastgit.org</code>.</p>
</li>
</ol>
</li>
<li><p> 利用码云<code>Gitee</code>，根据URL导入Github仓库。</p>
</li>
<li><p> 修改<code>hosts</code>文件（hhh其实不太管用）</p>
</li>
<li><p> Chrome插件</p>
</li>
<li><p> 使用代理</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>diary-1</title>
    <url>/2021/04/30/diary-1/</url>
    <content><![CDATA[<p>午后的阳光流入我的身体</p>
<p>像融化的奶油冰淇淋</p>
<p>闭上眼睛品味一下——</p>
<p>呀，是香草味的~</p>
<p>还有一点</p>
<p>樟树花的香气</p>
]]></content>
      <categories>
        <category>diary?</category>
      </categories>
      <tags>
        <tag>diary?</tag>
      </tags>
  </entry>
  <entry>
    <title>三种堆的插入效率比较</title>
    <url>/2021/03/28/Heap-Insertion-Comparison/</url>
    <content><![CDATA[<p>这个小Research是ADS课上老师的一个探索性问题，本周没有编程作业，所以自己想练习一下。</p>
<span id="more"></span>

<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>问题是这样的：</p>
<blockquote>
<p>In the first three weeks we have been trying everything to maintain a balanced tree, in order to get the operations done efficiently. So it seems that the balanced trees are the good guys and the skew trees are the bad guys.</p>
<p>But this week, we are gonna find out that sometimes, a skew tree can be the good guy, while a balanced tree is the worst case…</p>
<p>Although there is no programming problems to solve on PTA for this week, still I’d suggest you to do some coding – try to implement the ordinary heap, the leftist heap, and the skew heap, to compare their performance on a sequence of insertions. You may test them for random, increasing, and decreasing sequences; and at the mean time, vary the size of input from 100 to 1,000,000.</p>
</blockquote>
<p>总的来说就是比较Leftist Heap, Skew Heap和普通的Heap即Priority Queue之间，在进行不同序列的插入时，所花的时间。</p>
<p>一般的思路就是比较时间，如果有可能的话可以画图表示。</p>
<h3 id="贴代码"><a href="#贴代码" class="headerlink" title="贴代码"></a>贴代码</h3><p>主程序:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Ordinary_Heap.c&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Leftist_Heap.c&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Skew_Heap.c&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;0: increase, 1: decrease, 2: random&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Please wait...&quot;</span>);</span><br><span class="line">	FILE *fp, *output;</span><br><span class="line">	<span class="keyword">switch</span>(t)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">			fp = fopen(<span class="string">&quot;increase.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   			output = fopen(<span class="string">&quot;Result_increase.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">   			<span class="keyword">break</span>;</span><br><span class="line">   		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			fp = fopen(<span class="string">&quot;decrease.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   			output = fopen(<span class="string">&quot;Result_decrease.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">   			<span class="keyword">break</span>;</span><br><span class="line">   		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			fp = fopen(<span class="string">&quot;random.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   			output = fopen(<span class="string">&quot;Result_random.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">   			<span class="keyword">break</span>;</span><br><span class="line">   		<span class="keyword">default</span>:</span><br><span class="line">   			fp = fopen(<span class="string">&quot;random.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   			output = fopen(<span class="string">&quot;Result_random.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">   			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(!fp)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;Cannot open file!&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> M;</span><br><span class="line">	<span class="keyword">for</span>(M=<span class="number">0</span>; M&lt;<span class="number">100</span>; M++)&#123;</span><br><span class="line">		fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">	    <span class="keyword">clock_t</span> start, finish;</span><br><span class="line">	    <span class="keyword">double</span> time;</span><br><span class="line">	    <span class="comment">/* Leftist Heap */</span></span><br><span class="line">	    LHeap LH = <span class="literal">NULL</span>;</span><br><span class="line">	    <span class="keyword">int</span> N, i;</span><br><span class="line">	    <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	    start = clock();</span><br><span class="line">	    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">	        <span class="keyword">int</span> t;</span><br><span class="line">	        <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">	        LH = LInsert(t, LH);</span><br><span class="line">	    &#125;</span><br><span class="line">	    finish = clock();</span><br><span class="line">	    time = (<span class="keyword">double</span>) (finish-start)/CLOCKS_PER_SEC;</span><br><span class="line">	    <span class="comment">//LLevelOrderTraversal(LH, N);</span></span><br><span class="line">	    <span class="built_in">fprintf</span>(output, <span class="string">&quot;%d    %f    &quot;</span>, M, time);</span><br><span class="line">	    <span class="comment">/* Leftist Heap ends */</span></span><br><span class="line">	</span><br><span class="line">	    <span class="comment">/* Skew Heap */</span></span><br><span class="line">	    fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">	     SHeap SH = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//     int N, i;</span></span><br><span class="line">	     <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	     start = clock();</span><br><span class="line">	     <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">	         ElementType t;</span><br><span class="line">	         <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">	         SH = SInsert(t, SH);</span><br><span class="line">	     &#125;</span><br><span class="line">	     finish = clock();</span><br><span class="line">	     time = (<span class="keyword">double</span>) (finish-start)/CLOCKS_PER_SEC;</span><br><span class="line">	     <span class="comment">//SLevelOrderTraversal(SH, N);</span></span><br><span class="line">	     <span class="built_in">fprintf</span>(output, <span class="string">&quot;%f    &quot;</span>, time);</span><br><span class="line">	    <span class="comment">/* Skew Heap ends */</span></span><br><span class="line">	</span><br><span class="line">	    <span class="comment">/* Ordinary Heap */</span></span><br><span class="line">	    fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">	     Heap OH = (Heap)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct heap_struct));</span><br><span class="line">	     <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;OH-&gt;Capacity);</span><br><span class="line">	     OH-&gt;Elements = (ElementType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElementType) * (OH-&gt;Capacity + <span class="number">1</span>));</span><br><span class="line">	     OH-&gt;Size = OH-&gt;Capacity;</span><br><span class="line">	     start = clock();</span><br><span class="line">	     <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=OH-&gt;Size; i++)&#123;</span><br><span class="line">	         <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;OH-&gt;Elements[i]);</span><br><span class="line">	     &#125;</span><br><span class="line">	     <span class="keyword">for</span>(i=OH-&gt;Size/<span class="number">2</span>; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">	         Percolate_down(OH, i);</span><br><span class="line">	     &#125;</span><br><span class="line">	     finish = clock();</span><br><span class="line">	    <span class="comment">// for(i=1; i&lt;=OH-&gt;Size; i++)</span></span><br><span class="line">	    <span class="comment">//     printf(&quot;%d &quot;, OH-&gt;Elements[i]);</span></span><br><span class="line">	     time = (<span class="keyword">double</span>) (finish-start)/CLOCKS_PER_SEC;</span><br><span class="line">	     <span class="built_in">fprintf</span>(output, <span class="string">&quot;%f\n&quot;</span>, time);</span><br><span class="line">	     <span class="built_in">free</span>(OH-&gt;Elements);</span><br><span class="line">	     <span class="built_in">free</span>(OH);</span><br><span class="line">	    <span class="comment">/* Ordinary Heap ends */</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Please check \&quot;Result_xxx.txt\&quot; for the results generated.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">    fclose(output);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Leftist Heap:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Leftist_Heap.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lheap_node</span>&#123;</span></span><br><span class="line">    ElementType Element;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lheap_node</span> *<span class="title">Left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lheap_node</span> *<span class="title">Right</span>;</span></span><br><span class="line">    <span class="keyword">int</span> Npl;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lheap_node</span> *<span class="title">LHeap</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function">LHeap <span class="title">LMerge</span><span class="params">(LHeap H1, LHeap H2)</span></span>;</span><br><span class="line"><span class="function">LHeap <span class="title">LMerge1</span><span class="params">(LHeap H1, LHeap H2)</span></span>;</span><br><span class="line"><span class="function">LHeap <span class="title">LInsert</span><span class="params">(ElementType X, LHeap H)</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">LDeletemin</span><span class="params">(LHeap H)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LLevelOrderTraversal</span><span class="params">(LHeap H, <span class="keyword">int</span> N)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LHeap <span class="title">LMerge</span><span class="params">(LHeap H1, LHeap H2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(H1 == <span class="literal">NULL</span>)  <span class="keyword">return</span> H2;</span><br><span class="line">    <span class="keyword">if</span>(H2 == <span class="literal">NULL</span>)  <span class="keyword">return</span> H1;</span><br><span class="line">    <span class="keyword">if</span>(H1-&gt;Element &lt; H2-&gt;Element)</span><br><span class="line">        <span class="keyword">return</span> LMerge1(H1, H2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> LMerge1(H2, H1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LHeap <span class="title">LMerge1</span><span class="params">(LHeap H1, LHeap H2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(H1-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">        H1-&gt;Left = H2;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        H1-&gt;Right = LMerge(H1-&gt;Right, H2);</span><br><span class="line">        <span class="keyword">if</span>(H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl)&#123;</span><br><span class="line">            LHeap t = H1-&gt;Right;</span><br><span class="line">            H1-&gt;Right = H1-&gt;Left;</span><br><span class="line">            H1-&gt;Left = t;</span><br><span class="line">        &#125;</span><br><span class="line">        H1-&gt;Npl = H1-&gt;Right-&gt;Npl + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> H1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ElementType <span class="title">LDeletemin</span><span class="params">(LHeap H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType ret = H-&gt;Element;</span><br><span class="line">    LHeap tmp = H;</span><br><span class="line">    H = LMerge(H-&gt;Left, H-&gt;Right);</span><br><span class="line">    <span class="built_in">free</span>(tmp);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LHeap <span class="title">LInsert</span><span class="params">(ElementType X, LHeap H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LHeap tH = (LHeap)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct lheap_node));</span><br><span class="line">    tH-&gt;Element = X;</span><br><span class="line">    tH-&gt;Left = tH-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">    tH-&gt;Npl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> LMerge(H, tH);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LLevelOrderTraversal</span><span class="params">(LHeap H, <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LHeap Q[N];</span><br><span class="line">    <span class="keyword">int</span> head, tail, size=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(H)</span><br><span class="line">        Q[<span class="number">0</span>] = H, size++, head=tail=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        LHeap t = Q[head];</span><br><span class="line">        head = (head+<span class="number">1</span>)%N;</span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, t-&gt;Element);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;. &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            tail = (tail+<span class="number">1</span>)%N;</span><br><span class="line">            Q[tail] = t-&gt;Left;</span><br><span class="line">            tail = (tail+<span class="number">1</span>)%N;</span><br><span class="line">            Q[tail] = t-&gt;Right;</span><br><span class="line">            size+=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Skew Heap:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Skew_Heap.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sheap_node</span>&#123;</span></span><br><span class="line">    ElementType Element;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sheap_node</span> *<span class="title">Left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sheap_node</span> *<span class="title">Right</span>;</span></span><br><span class="line">&#125; *SHeap;</span><br><span class="line"></span><br><span class="line"><span class="function">SHeap <span class="title">SMerge</span><span class="params">(SHeap H1, SHeap H2)</span></span>;</span><br><span class="line"><span class="function">SHeap <span class="title">SMerge1</span><span class="params">(SHeap H1, SHeap H2)</span></span>;</span><br><span class="line"><span class="function">SHeap <span class="title">SInsert</span><span class="params">(ElementType X, SHeap H)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLevelOrderTraversal</span><span class="params">(SHeap H, <span class="keyword">int</span> N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SHeap <span class="title">SMerge</span><span class="params">(SHeap H1, SHeap H2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(H1 == <span class="literal">NULL</span>)  <span class="keyword">return</span> H2;</span><br><span class="line">    <span class="keyword">if</span>(H2 == <span class="literal">NULL</span>)  <span class="keyword">return</span> H1;</span><br><span class="line">    <span class="keyword">if</span>(H1-&gt;Element &lt; H2-&gt;Element)</span><br><span class="line">        <span class="keyword">return</span> SMerge1(H1, H2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> SMerge1(H2, H1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SHeap <span class="title">SMerge1</span><span class="params">(SHeap H1, SHeap H2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(H1-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">        H1-&gt;Left = H2;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        H1-&gt;Right = SMerge(H1-&gt;Right, H2);</span><br><span class="line">        </span><br><span class="line">        SHeap t = H1-&gt;Right;</span><br><span class="line">        H1-&gt;Right = H1-&gt;Left;</span><br><span class="line">        H1-&gt;Left = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> H1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SHeap <span class="title">SInsert</span><span class="params">(ElementType X, SHeap H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SHeap tmp = (SHeap)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct sheap_node));</span><br><span class="line">    tmp-&gt;Element = X;</span><br><span class="line">    tmp-&gt;Left = tmp-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> SMerge(H, tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLevelOrderTraversal</span><span class="params">(SHeap H, <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SHeap Q[N];</span><br><span class="line">    <span class="keyword">int</span> head, tail, size=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(H)</span><br><span class="line">        Q[<span class="number">0</span>] = H, size++, head=tail=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        SHeap t = Q[head];</span><br><span class="line">        head = (head+<span class="number">1</span>)%N;</span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, t-&gt;Element);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;. &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">            tail = (tail+<span class="number">1</span>)%N;</span><br><span class="line">            Q[tail] = t-&gt;Left;</span><br><span class="line">            tail = (tail+<span class="number">1</span>)%N;</span><br><span class="line">            Q[tail] = t-&gt;Right;</span><br><span class="line">            size+=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Ordinary Heap:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Ordinary_Heap.c</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heap_struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Capacity;</span><br><span class="line">    <span class="keyword">int</span> Size;</span><br><span class="line">    ElementType *Elements;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">heap_struct</span> *<span class="title">Heap</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Percolate_down</span><span class="params">(Heap H, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType key=H-&gt;Elements[p];</span><br><span class="line">    <span class="keyword">int</span> i, child;</span><br><span class="line">    <span class="keyword">for</span>(i=p; i*<span class="number">2</span>&lt;=H-&gt;Size; i=child)&#123;</span><br><span class="line">        child=i*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(child&lt;H-&gt;Size &amp;&amp; H-&gt;Elements[child+<span class="number">1</span>]&lt;H-&gt;Elements[child])</span><br><span class="line">            child++;</span><br><span class="line">        <span class="keyword">if</span>(H-&gt;Elements[child]&lt;key)</span><br><span class="line">            H-&gt;Elements[i]=H-&gt;Elements[child];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    H-&gt;Elements[i]=key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Percolate_up</span><span class="params">(Heap H, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType key=H-&gt;Elements[p];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=p; key&lt;H-&gt;Elements[i/<span class="number">2</span>]; i/=<span class="number">2</span>)&#123;   <span class="comment">// H-&gt;Elements[0]=min(H-&gt;Elements[1~H-&gt;Size])</span></span><br><span class="line">        H-&gt;Elements[i]=H-&gt;Elements[i/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    H-&gt;Elements[i]=key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后还有一个生成大量测试数据的小程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TestCaseGenerator.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM (100000)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Random</span></span><br><span class="line">    FILE *fp = fopen(<span class="string">&quot;random.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\n&quot;</span>, NUM);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NUM; i++)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d &quot;</span>, rand());</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Increasing</span></span><br><span class="line">    fp = fopen(<span class="string">&quot;increase.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\n&quot;</span>, NUM);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NUM; i++)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Decreasing</span></span><br><span class="line">    fp = fopen(<span class="string">&quot;decrease.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\n&quot;</span>, NUM);</span><br><span class="line">    <span class="keyword">for</span>(i=NUM; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要改变数据的规模，只要修改宏就好了。</p>
<hr>
<p>最后可以生成三个文件：<code>Result_increase.txt</code>, <code>Result_decrease.txt</code>, <code>Result_random.txt</code>.</p>
<p>将三个文件分别导入Origin的普通Workbook中，并选择生成Line图像。</p>
<p>Increase:</p>
<p><img src="https://cdn.jsdelivr.net/gh/colored-dye/Pics@main/Increase.png" alt="Increase"></p>
<p>Decrease:</p>
<p><img src="https://cdn.jsdelivr.net/gh/colored-dye/Pics@main/Decrease.png" alt="Decrease"></p>
<p>Random:</p>
<p><img src="https://cdn.jsdelivr.net/gh/colored-dye/Pics@main/Random.png"></p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ol>
<li> Priority Queue在每种输入序列下，速度都是最快的。</li>
<li> 总的来说，Leftist Heap与Skew Heap在处理三种输入序列的情况下速度无显著差异。尤其是递减序列，两者几乎重合。处理递增序列时，Skew Heap有极其微弱的优势；而处理随机序列时，Leftist Heap又稍占上风。</li>
</ol>
<p>P.S: 好像并没有得到什么明显的结论。虽然Skew Heap实现起来稍微简单一些，但是与Leftist Heap的代码几乎没什么差别啊！我实现Skew Heap就是把Leftist Heap的代码拿过来删了点而已……桑心QAQ</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile语法</title>
    <url>/2021/07/11/Makefile%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h4 id="Makefile中使用变量"><a href="#Makefile中使用变量" class="headerlink" title="Makefile中使用变量"></a>Makefile中使用变量</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">    insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">    cc -o edit <span class="variable">$(objects)</span></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">    cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">    cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">    cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">    cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">    cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">    cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">    cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">    cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">    rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="让make自动推导"><a href="#让make自动推导" class="headerlink" title="让make自动推导"></a>让make自动推导</h4><p>只要make看到一个<code>.o</code>文件，就会自动把对应的<code>.c</code>文件加载到依赖关系中。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">    insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">    cc -o edit <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">main.o : defs.h</span><br><span class="line">kbd.o : defs.h command.h</span><br><span class="line">command.o : defs.h command.h</span><br><span class="line">display.o : defs.h buffer.h</span><br><span class="line">insert.o : defs.h buffer.h</span><br><span class="line">search.o : defs.h buffer.h</span><br><span class="line">files.o : defs.h buffer.h command.h</span><br><span class="line">utils.o : defs.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure>

<h4 id="关于清空目标文件的规则"><a href="#关于清空目标文件的规则" class="headerlink" title="关于清空目标文件的规则"></a>关于清空目标文件的规则</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	-rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure>

<p><code>rm</code>命令前加了<code>-</code>的意思是，忽略问题，继续运行。</p>
<h4 id="引用其他的makefile"><a href="#引用其他的makefile" class="headerlink" title="引用其他的makefile"></a>引用其他的makefile</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> foo.make *.mk <span class="variable">$(bar)</span></span><br></pre></td></tr></table></figure>

<p>如果在当前目录下找不到，make还会再下面几个目录里找：</p>
<ol>
<li> 如果make执行时，有<code>-I</code>或<code>--include-dir</code>参数，那么make就会在这个参数所指定的目录下去寻找。</li>
<li> 如果目录<code>&lt;prefix&gt;/include</code>（一般是：<code>/usr/local/bin</code>或<code>/usr/include</code>）存在的话，make也会去找。</li>
</ol>
<h4 id="文件搜寻：VPATH"><a href="#文件搜寻：VPATH" class="headerlink" title="文件搜寻：VPATH"></a>文件搜寻：<code>VPATH</code></h4><p>如果没有指明这个变量，make只会再当前目录寻找。</p>
<p>一般可以定义为：<code>VPATH = src:../headers</code>，用冒号分隔。</p>
<p>还可以用小写vpath设置，需要使用<code>%</code>字符，意思时匹配0或若干字符。</p>
<p>如：<code>vpath %.h ../headers</code>.</p>
<h4 id="多目标"><a href="#多目标" class="headerlink" title="多目标"></a>多目标</h4><p>自动化变量<code>$@</code>，表示目前规则中所有的目标的集合。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">bigoutput littleoutput: text.g</span><br><span class="line">	generate text.g -<span class="variable">$(<span class="built_in">subst</span> output,,<span class="variable">$@</span>)</span> &gt; <span class="variable">$@</span></span><br></pre></td></tr></table></figure>

<p><code>subst</code>为makefile的一个函数，表示替换字符串。</p>
<h4 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h4><p>一个例子：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = foo.o bar.o</span><br><span class="line"><span class="section">all: <span class="variable">$(objects)</span></span></span><br><span class="line"><span class="variable">$(objects)</span>: %.o: %.c</span><br><span class="line">	<span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure>

<p><code>$&lt;</code>表示第一个依赖文件，<code>$@</code>表示目标集。</p>
<h4 id="自动生成依赖"><a href="#自动生成依赖" class="headerlink" title="自动生成依赖"></a>自动生成依赖</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">cc -M main.c</span><br></pre></td></tr></table></figure>

<p>如果使用GNU的C/C++编译器，要用<code>-MM</code>参数，否则<code>-M</code>参数会把一些标准库的头文件也包含进来。</p>
<h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><p><code>+=</code>: 追加：<code>objects += another.o</code>.</p>
<p>如果变量之前没有定义过，<code>+=</code>会自动变成<code>=</code>. 如果前面有变量定义，<code>+=</code>会继承前一次的赋值符。</p>
<p>所以分别以<code>:=</code>和<code>=</code>定义的变量，运用<code>+=</code>时，结果可能会有所不同。</p>
<p>对于<code>=</code>，变量的值会是最终值：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">x = foo</span><br><span class="line">y = <span class="variable">$(x)</span> bar</span><br><span class="line">x = xyz</span><br></pre></td></tr></table></figure>

<p>那么y会是<code>xyz bar</code>，而不是<code>foo bar</code>.</p>
<p>而<code>:=</code>表示变量的值取决于其位置：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">x := foo</span><br><span class="line">y := <span class="variable">$(x)</span> bar</span><br><span class="line">x := xyz</span><br></pre></td></tr></table></figure>

<p>在这里，y的值会是<code>foo bar</code>而不是<code>xyz bar</code>.</p>
<hr>
<h3 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h3><h4 id="一、函数的调用语法"><a href="#一、函数的调用语法" class="headerlink" title="一、函数的调用语法"></a>一、函数的调用语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&lt;function&gt; &lt;arguments&gt;)</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;&lt;function&gt; &lt;arguments&gt;&#125;</span><br></pre></td></tr></table></figure>

<p><code>&lt;arguments&gt;</code>为函数的参数，参数间以逗号分隔，而函数名和参数之间以空格分隔。</p>
<h4 id="二、字符串处理函数"><a href="#二、字符串处理函数" class="headerlink" title="二、字符串处理函数"></a>二、字符串处理函数</h4><ol>
<li><p>subst</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</span><br></pre></td></tr></table></figure>

<p> 字符串替换函数：将字串<code>&lt;text&gt;</code>中的<code>&lt;from&gt;</code>字串替换成<code>&lt;to&gt;</code>。</p>
<p> 函数返回被替换过后的字符串。</p>
</li>
<li><p>patsubst</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(patsubst &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</span><br></pre></td></tr></table></figure>

<p> 模式字符串替换函数：查找 <code>&lt;text&gt;</code> 中的单词（单词以“空格”、“Tab”或“回车”“换行”分隔）是否符合模式<code>&lt;pattern&gt;</code> ，如果匹配的话，则以<code>&lt;replacement&gt;</code>替换。这里， 可以包括通配符 <code>%</code> ，表示任意长度的字串。如果<code>&lt;replacement&gt;</code>中也包含 <code>%</code> ，那么这个 <code>%</code> 将是 <code>&lt;pattern&gt;</code>中的那个 <code>%</code> 所代表的字串。（可以用 <code>\</code>来转义，以 <code>\%</code> 来表示真实含义的 <code>%</code> 字符）</p>
<p> 返回：函数返回被替换过后的字符串。</p>
<p> 示例：</p>
<blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; $(patsubst %.c,%.o,x.c.c bar.c)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p> 又如：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">objects &#x3D; foo.o bar.o baz.o</span><br></pre></td></tr></table></figure>

<p> 那么<code>$(objects:.o=.c)</code>和<code>$(oatsubst %.o,%.c,$(objects))</code>是一样的。</p>
</li>
<li><p>strip</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(strip &lt;string&gt;)</span><br></pre></td></tr></table></figure>

<p> 去空格函数：去掉<code>&lt;string&gt;</code>字串开头和结尾的空字符，返回被去掉空格的字符串值。</p>
</li>
<li><p>filter函数</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(filter &lt;pattern...&gt;,&lt;text&gt;)</span><br></pre></td></tr></table></figure>

<p> 过滤函数：以模式过滤<code>&lt;text&gt;</code>字符串中的单词，保留符合模式<code>&lt;pattern&gt;</code>的单词。可以有多个模式。返回符合模式<code>&lt;pattern&gt;</code>的字串。</p>
<p> 示例：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sources :&#x3D; foo.c bar.c baz.s ugh.h</span><br><span class="line">foo: $(sources)</span><br><span class="line">	cc $(filter %.c %.s,$(sources)) -o foo</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="三、文件名操作函数"><a href="#三、文件名操作函数" class="headerlink" title="三、文件名操作函数"></a>三、文件名操作函数</h4><ol>
<li><p>dir</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(dir &lt;names...&gt;)</span><br></pre></td></tr></table></figure>

<p> 去目录函数：从文件名序列<code>&lt;names&gt;</code>中取出目录部分。目录部分是指最后一个反斜杠之前的部分。如果没有反斜杠，则返回<code>./</code>。</p>
</li>
<li><p>notdir</p>
<p> 取出文件名序列<code>&lt;names&gt;</code>中非目录部分。</p>
</li>
<li><p>suffix</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(suffix &lt;names...&gt;)</span><br></pre></td></tr></table></figure>

<p> 取后缀函数：从文件名序列<code>&lt;names&gt;</code>中取出各个文件名的后缀。如果文件没有后缀，则返回空字串。</p>
</li>
</ol>
<h4 id="四、foreach函数"><a href="#四、foreach函数" class="headerlink" title="四、foreach函数"></a>四、foreach函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(foreach &lt;var&gt;,&lt;list&gt;,&lt;text&gt;)</span><br></pre></td></tr></table></figure>

<p>把参数<code>&lt;list&gt;</code>中的单词逐一取出放到参数<code>&lt;var&gt;</code>所指定的变量中，再执行<code>&lt;text&gt;</code>所包含的表达式。每一次<code>&lt;text&gt;</code>会返回一个字符串，以空格分隔。</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">names :&#x3D; a b c d</span><br><span class="line">files :&#x3D; $(foreach n,$(names),$(n).o)</span><br></pre></td></tr></table></figure>

<p>注意：<code>&lt;var&gt;</code>参数是一个<strong>临时的局部变量</strong>。</p>
<h4 id="五、if函数"><a href="#五、if函数" class="headerlink" title="五、if函数"></a>五、if函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(if &lt;condition&gt;,&lt;then-part&gt;,&lt;else-part&gt;)</span><br></pre></td></tr></table></figure>

<p>可以不包含else部分。</p>
<h4 id="六、call函数"><a href="#六、call函数" class="headerlink" title="六、call函数"></a>六、call函数</h4><p>唯一一个可以用来创建新的参数化的函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(call &lt;expression&gt;,&lt;parm1&gt;,&lt;parm2&gt;,...,&lt;parmn&gt;)</span><br></pre></td></tr></table></figure>

<p><code>&lt;expression&gt;</code>参数中的变量会被参数<code>&lt;param1&gt;</code>,<code>&lt;param2&gt;</code>依次取代。</p>
]]></content>
      <categories>
        <category>Makefile</category>
      </categories>
      <tags>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo图片显示</title>
    <url>/2021/03/22/Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p>这两天捣鼓Hexo的各种基本配置，结果在发布图片上发生了一点困难。现在已知的以Hexo + Github为框架的博客发布图片有几种方法：</p>
<ol>
<li><p> 作为网页源文件之一的实体文件，通过<code>images/xxx.jpg</code>在Markdown语法下引用。</p>
</li>
<li><p>利用图床生成URL并引用外链。</p>
<p> 图床又有几种常用的：</p>
<ol>
<li><p> <code>sm.ms</code>：看起来有点怪怪的网站名(&gt;v&lt;)。优点是免费，有10G存储空间；缺点是需要翻墙。</p>
</li>
<li><p><code>Github</code> Repository：现在初期决定采取的方法。建立一个Repository专门用来保存图片。由于引用链接时会访问<code>raw.githubusercontent.com</code>，所以采用<code>cdn.jsdelivr.net/gh/[Github_username]/[Repo_name]@[Version]/[Filename]</code>的方式加速加载。jsdelivr yyds！</p>
<p> 在本机上还可以采用修改host文件的方式。先通过</p>
<p> [ipaddress]: <a href="http://www.ipaddress.com/">www.ipaddress.com</a></p>
<p> 查询<code>raw.githubusercontent.com</code>的IP，再添加到host文件中就可以啦！但是在移动端就没办法了。所以还是jsdelivr比较好！（虽然麻烦一点需要改链接）</p>
</li>
<li><p> 七牛云：免费10G存储。但是需要有个人域名，否则在一个月之后会回收测试域名！</p>
</li>
<li><p> 腾讯COS：比较便宜也很稳定。但是需要花钱的还是多考虑考虑hhh.</p>
</li>
</ol>
</li>
</ol>
<span id="more"></span>

<p>此外还采用了一个简单易用的图床链接生成工具PicGo，并支持以上提到的所有图床。目前用着感觉还挺好用的。</p>
<p>现在在申请一个阿里云的域名的实名认证，以后就可以有自己的域名啦哈哈哈哈~</p>
<p>最后插一个图片再次测试一下~</p>
<img src="https://cdn.jsdelivr.net/gh/colored-dye/Pics@main/Kotaro_Holding_Guitar" style="zoom: 33%;" />]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>xv6-riscv学习1-Chapter1</title>
    <url>/2021/05/01/xv6-riscv-1/</url>
    <content><![CDATA[<h3 id="Chapter-1-Operating-System-Interfaces"><a href="#Chapter-1-Operating-System-Interfaces" class="headerlink" title="Chapter 1: Operating System Interfaces"></a>Chapter 1: Operating System Interfaces</h3><p>第一章讲的是操作系统接口。“接口”这个概念在计算机领域挺常见的，它使得代码规范标准化，并使得在保持参数传递不变的情况下对接口底层功能进行修改成为了可能。</p>
<span id="more"></span>

<p>在这里，接口与<strong>系统调用</strong> (<strong>system call</strong>)是紧密相关的。系统调用就是操作系统内核向用户程序提供的访问内核功能的接口。实际上，系统调用在操作系统分层模型的实现中是极其重要的。书中有一幅图呈现了user space和kernel space之间的关系：</p>
<img src="https://cdn.jsdelivr.net/gh/colored-dye/Pics@main/xv6layered-view" style="zoom:50%;" />

<p>这其实带来了一个问题：系统调用的功能是不是越复杂、越丰富越好呢？书中给出的答案是否定的，并给出了一个目标：“Design interfaces that rely on a few mechanisms that can be combined to provide much generality.”这大概就是说“大而全不如小而精”吧。</p>
<p>同时可以注意到，上图中shell是在用户空间里的，也就是说shell在xv6系统中是用户程序。这样一来，其实可以使得用户更换shell变得很方便，只要使用同样的接口就可以了。现实中常用的Linux系统也都是这样的。</p>
<p>接下来仍遵循书中的结构~</p>
<h4 id="1-进程与内存"><a href="#1-进程与内存" class="headerlink" title="1. 进程与内存"></a>1. 进程与内存</h4><p>在操作系统中，一般会有多个进程“同时”运行，每个进程在内核中被分配有一个唯一的进程标识符(process identifier)，缩写<code>PID</code>。真正意义上的“同时”只有在多核CPU上才能实现，而对于单核CPU，操作系统会通过进程调度机制轮流执行各个进程，由于切换的速度非常快，给人的感觉就像是同时一样。</p>
<p>创建新进程的方法一般通过<code>fork()</code>或<code>exec()</code>系统调用实现。<code>fork</code>会给新创建的子进程复制一份父进程的内存，内容完全一样，如果从标准的ELF格式来看的话，从text, data, bss到stack都是一样的。<code>fork</code>很特殊的一点是其有两个返回值：向父进程返回子进程的<code>PID</code>，向子进程返回0. </p>
<p>一个经典的<code>fork</code>测试程序大致如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testfork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent: child PID = %d\n&quot;</span>, pid);</span><br><span class="line">        pid = wait(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child %d terminates\n&quot;</span>, pid);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child exiting\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fork error\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有意思的是“child xxx terminating”和“parent: child PID = xxx”的先后顺序是不一定的。</p>
<p>而<code>exec</code>系统调用直接将文件加载到内存中，文件通常是ELF(Executable and Linkable Format)格式。在Linux系统中文件类型可以通过<code>file [filename]</code>命令查看。</p>
<p>书中给了一小段程序用于帮助解释<code>exec</code>的功能：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *argv[<span class="number">3</span>];</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">&quot;echo&quot;</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">argv[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">exec(<span class="string">&quot;/bin/echo&quot;</span>, argv);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;exec error\n&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>之所以在<code>exec()</code>的下一行输出错误信息，是因为当exec执行成功时，会将当前进程的内存空间覆盖掉，原程序的代码自然就无法执行了。</p>
<p><code>fork</code>如果每创建一个新进程时都复制父进程的所有内存，其实是很浪费时间的。现在大多数操作系统采取的是<strong>写时复制</strong>(<strong>copy-on-write</strong>) ，也就是说，子进程刚创建时，是与父进程共用地址空间的。如果子进程只进行读操作，那就是最划算的了。而当子进程需要写入一段内存时，才会给子进程将要写入的对应页表进行复制，其余部分仍共享。</p>
<h4 id="2-I-O与文件描述符"><a href="#2-I-O与文件描述符" class="headerlink" title="2. I/O与文件描述符"></a>2. I/O与文件描述符</h4><p>文件描述符为文件、目录和设备提供了统一的表示方法，从而将它们都抽象为文件流的形式。所以，文件也是一个抽象，而系统为访问和操纵文件提供了统一的接口。</p>
<p>每一个进程都会维护一个open-file table（不知道怎么翻译了XD），其中包含了这个进程所访问的文件描述符。</p>
<p>关于<code>fork</code>和<code>exec</code>还有很特殊的特性：<code>fork</code>会复制父进程的file table给子进程，而<code>exec</code>会保留调用者进程的file table。这就使得<strong>I/O重定向</strong>(<strong>I/O redirection</strong>) 很容易实现：先fork，再exec.</p>
<p>(其实这一节还有一些比较复杂的，但是我看不太懂就不贴上来了)</p>
<h4 id="3-管道-Pipe"><a href="#3-管道-Pipe" class="headerlink" title="3. 管道(Pipe)"></a>3. 管道(Pipe)</h4><p><code>pipe</code>用于将一个进程的输出流作为另一个进程的输入流。如常用的：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-cache search vim | grep vim</span><br></pre></td></tr></table></figure>

<p>其实有点类似于重定向，但是它在更广泛的意义上提供了进程间通信的方法。当需要传输的数据量不太大时，可以通过重定向来实现管道的功能，如<code>echo hello world | wc</code>可以实现为：<code>echo hello world &gt; /tmp/xyz; wc &lt; /tmp/xyz</code>. 但是管道的一个优点就是它可以传递任意长度的数据流。</p>
<p>管道有一个写端、一个读端。当两个进程通过一个管道进行通信时，它们的读端和写端都是一样的。</p>
<p>接下来的示例程序就有点复杂了：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> p[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">&quot;wc&quot;</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">pipe(p);</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">    close(<span class="number">0</span>);</span><br><span class="line">    dup(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">    exec(<span class="string">&quot;/bin/wc&quot;</span>, argv);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    close(p[<span class="number">0</span>]);</span><br><span class="line">    write(p[<span class="number">1</span>], <span class="string">&quot;hello world!\n&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>书中是这样解释这段程序的功能的：<code>fork</code>之后，父进程和子进程共用管道<code>p[]</code>所指的文件描述符。子进程调用<code>close</code>和<code>dup</code>使得管道的读端为文件描述符0，关闭了<code>p[]</code>中的文件描述符，并调用<code>exec</code>运行<code>wc</code>。当<code>wc</code>从标准输入（即文件描述符0）读取输入时，它就会从管道中读。父进程关闭了管道的读端，向管道中写入“hello world!\n”，后关闭了管道的写端。</p>
<p>关于管道，书中提到了一个神奇的用法。管道的右侧还可以包含管道！比如：<code>a | b | c |...</code>，从而可以构建一个进程树，在这样的树中，父节点需要等待所有的子节点执行完毕才能开始执行。</p>
<p>书中还提到管道的一个优点是允许流水线的并行执行，然而采用文件重定向的方法就必须等前一个程序写入文件完成后才能让下一个程序执行。想一想还是挺有道理的，毕竟数据流的特点就是可以实时处理。</p>
<h4 id="4-文件系统"><a href="#4-文件系统" class="headerlink" title="4. 文件系统"></a>4. 文件系统</h4><p>与文件操作相关的系统调用有很多，如<code>chdir</code>, <code>open</code>, <code>mkdir</code>, <code>close</code>, <code>mknod</code>等。前四个还比较直接明了，第四个<code>mknod</code>创建一个指代着设备的特殊文件，与这个文件直接相关的是两个设备号：major device number和minor device number，暂且翻译成“主、次设备号”好了。一般的使用方式是：<code>mknod(&quot;/console&quot;, 1, 1)</code>.</p>
<p>书中还提到了部分与文件系统相关的概念：<code>inode</code>和<code>link</code>。<code>inode</code>保存了文件的元数据(metadata)，包括文件类型（文件/目录/或设备）、文件内容在磁盘上的地址和指向该文件的链接数。每个inode可以有多个链接，而每个链接都包含了目录中的一个条目(entry)，条目中包含了文件名和inode号。所以文件名不是文件内容的一部分！</p>
<p>记录一个文件的数据结构长这个样子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_DIR 		1	<span class="comment">// Directory</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_FILE		2	<span class="comment">// File</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_DEVICE	 3	<span class="comment">// Device</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> dev;	<span class="comment">// File system&#x27;s disk device</span></span><br><span class="line">    uint ino;	<span class="comment">// Inode number</span></span><br><span class="line">    <span class="keyword">short</span> type;	<span class="comment">// Type of file</span></span><br><span class="line">    <span class="keyword">short</span> nlink;<span class="comment">// Number of links</span></span><br><span class="line">    uint64 size;<span class="comment">// Size of file in bytes</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>关于<code>link</code>系统调用，这里实现的应该是软链接(soft link)，即新创建的链接并不是保存在额外的文件中，而是直接指向了被引用的文件。以下是一段创建链接的示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">open(<span class="string">&quot;a&quot;</span>, O_CREATE | O_WRONLY);</span><br><span class="line">link(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在此之后，文件名“a”和“b”都指的是同一个文件，使用这两个文件名会得到相同的inode number，而对应的<code>struct stat</code>变量中的nlink值为2.</p>
<p>如果调用<code>ulink(&quot;a&quot;)</code>，那么这个文件名便只剩下了b，nlink值又变回了1.</p>
]]></content>
      <categories>
        <category>xv6-riscv</category>
        <category>OS</category>
        <category>RISC-V</category>
      </categories>
      <tags>
        <tag>xv6-riscv</tag>
        <tag>OS</tag>
        <tag>RISC-V</tag>
      </tags>
  </entry>
  <entry>
    <title>xv6-riscv学习0</title>
    <url>/2021/04/11/xv6-riscv-0/</url>
    <content><![CDATA[<p>这一篇应该算是预告吧。也不算是心血来潮。在上个学期上操作系统课时，既不想再痛苦地学又对操作系统感兴趣的复杂心理作用之下，还是想多了解一些的心理占了上风。加之听老师说这个学期会有一次操作系统比赛。所以还是趁有时间多学学吧。</p>
<span id="more"></span>

<p>至于选择xv6-riscv的原因，还是有一段孽缘的。当时在完成课程lab的时候就了解到了MIT的xv6教学用操作系统，并且在做页表lab时“借鉴”了很多代码XD。但是再后来，由于课程lab的结构和设计与xv6渐行渐远，就没法借鉴了。而现在就可以一门心思地钻研xv6啦。</p>
<p>xv6有<code>x86</code>和<code>RISC-V</code>两个版本。今后的代码以<code>RISC-V</code>为主，但是<code>RISC-V</code>的配套文档没有中文版。不过基本的设计思想应该还是相近的，所以可以配合着阅读。官方给出的<code>RISC-V</code>文档需要用<code>make</code>和<code>tex</code>命令行编译，而且只能在类UNIX系统上跑，所以在网上白嫖了一份~链接如下。有一点乱码，等影响阅读的时候再自己编译吧。</p>
<p>MIT的该课程网站：<a href="https://pdos.csail.mit.edu/6.S081/2020/">https://pdos.csail.mit.edu/6.S081/2020/</a></p>
<p>老师在中后期的时候总是提到要给下一届的同学的lab加上文件系统，应该是和<code>QEMU</code>紧密相关的，这个也可以考虑考虑（等学完xv6的吧）。</p>
<p>同时还有清华大学的操作系统课程lab，他们做的是用<code>Rust</code>语言写的<code>ros</code>。应该是由于<code>Rust</code>语言的特性使得其比较适合编写操作系统吧。不过<code>Rust+RISC-V</code>的组合真是前卫啊hhh.</p>
<p>回到xv6来。简单翻阅了一下<code>xv6-riscv-book</code>，发现章节后面有相应的练习，而且多数是要求代码实现的。这个是一定要做的。尽管在做课程lab时极其痛苦，但是我还是深刻地感受到“Talk is cheap. Show me the code.”的正确。即使做不出来至少也要尝试几次。</p>
<p>希望可以坚持下去……加油！</p>
]]></content>
      <categories>
        <category>xv6-riscv</category>
        <category>OS</category>
        <category>RISC-V</category>
      </categories>
      <tags>
        <tag>xv6-riscv</tag>
        <tag>OS</tag>
        <tag>RISC-V</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式1</title>
    <url>/2021/07/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1/</url>
    <content><![CDATA[<h3 id="常用的元字符"><a href="#常用的元字符" class="headerlink" title="常用的元字符"></a>常用的元字符</h3><table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>.</code></td>
<td align="center">匹配除换行符外的任意字符</td>
</tr>
<tr>
<td align="center"><code>\w</code></td>
<td align="center">匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td align="center"><code>\s</code></td>
<td align="center">匹配任意的空白符</td>
</tr>
<tr>
<td align="center"><code>\d</code></td>
<td align="center">匹配数字</td>
</tr>
<tr>
<td align="center"><code>\b</code></td>
<td align="center">匹配单词的开始或结束</td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center">匹配字符串的开始</td>
</tr>
<tr>
<td align="center"><code>$</code></td>
<td align="center">匹配字符串的结束</td>
</tr>
</tbody></table>
<p>例如，寻找“hi”: <code>\bhi\b</code>；寻找“hi”后面不远处跟着“Lucy”: <code>\bhi\b.*\bLucy\b</code>.</p>
<span id="more"></span>

<h3 id="常用的限定符"><a href="#常用的限定符" class="headerlink" title="常用的限定符"></a>常用的限定符</h3><table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>\W</code></td>
<td align="center">匹配任意不是字母、数字、下划线、汉字的字符</td>
</tr>
<tr>
<td align="center"><code>\S</code></td>
<td align="center">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td align="center"><code>\D</code></td>
<td align="center">匹配任意非数字的字符</td>
</tr>
<tr>
<td align="center"><code>\B</code></td>
<td align="center">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td align="center"><code>[^x]</code></td>
<td align="center">匹配除了x以外的任意字符</td>
</tr>
<tr>
<td align="center"><code>[^aeiou]</code></td>
<td align="center">匹配除了aeiou这几个字母意外的任意字符</td>
</tr>
</tbody></table>
<h3 id="常用分组语法"><a href="#常用分组语法" class="headerlink" title="常用分组语法"></a>常用分组语法</h3><table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">代码</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">捕获</td>
<td align="center"><code>(exp)</code></td>
<td align="center">匹配exp，并捕获文本到自动命名的组里</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><code>(?exp)</code></td>
<td align="center">匹配exp，并捕获文本到名称为name的组里</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><code>(?:exp)</code></td>
<td align="center">匹配exp，不捕获匹配的文本，也不给此分组分配组号</td>
</tr>
<tr>
<td align="center">零宽断言</td>
<td align="center"><code>(?=exp)</code></td>
<td align="center">匹配exp前面的位置</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><code>(?&lt;=exp)</code></td>
<td align="center">匹配exp后面的位置</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><code>(?!exp)</code></td>
<td align="center">匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"><code>(?&lt;!exp)</code></td>
<td align="center">匹配前面不是exp的位置</td>
</tr>
<tr>
<td align="center">注释</td>
<td align="center"><code>(?#comment)</code></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="懒惰限定符"><a href="#懒惰限定符" class="headerlink" title="懒惰限定符"></a>懒惰限定符</h3><table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>*?</code></td>
<td align="center">重复任意次，但尽可能少重复</td>
</tr>
<tr>
<td align="center"><code>+?</code></td>
<td align="center">重复1次或更多次，但尽可能少重复</td>
</tr>
<tr>
<td align="center"><code>??</code></td>
<td align="center">重复0次或1次，但尽可能少重复</td>
</tr>
<tr>
<td align="center"><code>&#123;n, m&#125;?</code></td>
<td align="center">重复n到m次，但尽可能少重复</td>
</tr>
<tr>
<td align="center"><code>&#123;n,&#125;?</code></td>
<td align="center">重复n次以上，但尽可能少重复</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Regular-Expression</category>
      </categories>
      <tags>
        <tag>Regular-Expression</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫:提交表单数据</title>
    <url>/2021/08/29/%E7%88%AC%E8%99%AB-%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>最近有这样的需求：从excel表格读取数据、逐条发送到网站查询信息、并将结果存到excel文件中。由于数据规模达到了1000以上，手动复制粘贴十分费时耗力。此外，由于每年都有这样的工作，并且预期网站不会大改，所以为其编写程序很值得。而因为用户对Python并不太了解，所以需要制作单独的<code>exe</code>可执行文件。</p>
<span id="more"></span>

<p><strong>计划</strong> ：先用编写Python脚本文件，再利用工具将脚本编译为<code>exe</code>可执行文件。</p>
<h3 id="0-分析目标网站"><a href="#0-分析目标网站" class="headerlink" title="0. 分析目标网站"></a>0. 分析目标网站</h3><p>目标网站是技术等级证书网站: <code>http://zscx.osta.org.cn</code>.</p>
<p><img src="https://cdn.jsdelivr.net/gh/colored-dye/Pics@main/zscx_front_page.png"></p>
<p>任务是根据一个人的名字和身份证号查询他/她所拥有的证书编号和职业资格类型。</p>
<p>如果查询姓名为“hhh”、身份证号为“123”的证书，肯定是查询不到的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/colored-dye/Pics@main/zscx_no_result.png"></p>
<p>但是可以查看源代码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/colored-dye/Pics@main/zscx_no_result_source.png"></p>
<p>提交的是<code>POST</code>类型的数据。</p>
<p>请求头：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">POST /jiandingApp/command/buzhongxin/ecCertSearchAll HTTP/1.1</span><br><span class="line">Host: zscx.osta.org.cn</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://zscx.osta.org.cn/</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 89</span><br><span class="line">Origin: http://zscx.osta.org.cn</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: JSESSIONID=89F493D88940EEA188BC01D3939762D5; Hm_lvt_5e21f0d47312f3be133220d325fc2d4d=1629881339; Hm_lvt_52a88c3e9ecd4f7af925dc3400f43e25=1629881361; Hm_lpvt_5e21f0d47312f3be133220d325fc2d4d=1630238199; Hm_lpvt_52a88c3e9ecd4f7af925dc3400f43e25=1630238199</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure>

<p>最重要的是<code>User-Agent</code>，用于模仿浏览器行为。<code>Accept</code>, <code>Referer</code>, <code>Content-Type</code>也需要。</p>
<p>表单数据的格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">tableName=CERT_T&amp;tableName1=000000&amp;CertificateID=&amp;CID=123&amp;Name=hhh&amp;x=256&amp;y=14&amp;province=-1</span><br></pre></td></tr></table></figure>

<h3 id="1-脚本"><a href="#1-脚本" class="headerlink" title="1. 脚本"></a>1. 脚本</h3><h5 id="1-库"><a href="#1-库" class="headerlink" title="(1) 库"></a>(1) 库</h5><p>脚本需要的库有：<code>requests</code>, <code>lxml</code>, <code>urllib</code>, <code>lxrd</code>, <code>lxwt</code>, <code>os</code>.</p>
<ul>
<li><p>  <code>requests</code>库用于向网站发送<code>POST</code>消息。</p>
</li>
<li><p>  <code>lxml</code>用于解析返回的HTML代码。</p>
</li>
<li><p>  <code>urllib</code>用于编码转换。</p>
</li>
<li><p>  <code>lxrd</code>用于excel表格读取，<code>lxwt</code>用于excel表格写入。</p>
</li>
<li><p>  <code>os</code>用于操作系统相关操作，这里只用了<code>os.system(&quot;pause&quot;)</code>.</p>
</li>
</ul>
<h5 id="2-代码"><a href="#2-代码" class="headerlink" title="(2) 代码"></a>(2) 代码</h5><p>话不多说，上代码！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;tableName&#x27;</span>: <span class="string">&#x27;CERT_T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tableName1&#x27;</span>: <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CertificateID&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CID&#x27;</span>: <span class="string">&#x27;000000000000000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;是谁呢&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;x&#x27;: &#x27;113&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;y&#x27;: &#x27;31&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;province&#x27;</span>: <span class="string">&#x27;-1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">phead = &#123;</span><br><span class="line">	<span class="comment"># &#x27;Host&#x27;: &#x27;zscx.osta.org.cn&#x27;,</span></span><br><span class="line">	<span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line">	<span class="comment"># &#x27;Upgrade-Insecure-Requests&#x27;: &#x27;1&#x27;,</span></span><br><span class="line">	<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;http://zscx.osta.org.cn&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://zscx.osta.org.cn/&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://zscx.osta.org.cn/jiandingApp/command/buzhongxin/ecCertSearchAll&#x27;</span></span><br><span class="line"><span class="comment"># 下载超时</span></span><br><span class="line">timeOut = <span class="number">25</span></span><br><span class="line"><span class="comment"># 输出表格行</span></span><br><span class="line">Index = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">i, content, outsheet</span>):</span></span><br><span class="line">	<span class="keyword">global</span> Index</span><br><span class="line">	html = etree.HTML(content)</span><br><span class="line">	<span class="comment"># 无结果</span></span><br><span class="line">	res = html.xpath(<span class="string">&quot;/html/body/div[@id=&#x27;wrap&#x27;]/div[@id=&#x27;center_jg&#x27;]/div[@class=&#x27;jg_con_2&#x27;]/div[@class=&#x27;zscxsj&#x27;]/div[@class=&#x27;zscxsj_1 back_f5&#x27;]/div[@id=&#x27;nores_con&#x27;]/div[@id=&#x27;nores_txt&#x27;]/h2/text()&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(res) != <span class="number">0</span>:</span><br><span class="line">		print(i, <span class="string">&quot;:无结果&quot;</span>)</span><br><span class="line">		<span class="comment"># print(res)</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		print(i, <span class="string">&quot;:查询成功&quot;</span>)</span><br><span class="line">		result = html.xpath(<span class="string">&quot;/html/body/div[@id=&#x27;wrap&#x27;]/div[@id=&#x27;center_jg&#x27;]/div[@class=&#x27;jg_con_2&#x27;]/div[@class=&#x27;zscxsj&#x27;]/div[@class=&#x27;zscxsj_1 back_f5&#x27;]/div[@class=&#x27;table_1&#x27;]/table[@class=&#x27;tab_info1&#x27;]/tr/td/text()&quot;</span>)</span><br><span class="line">		<span class="comment"># print(&quot;证书编号: &#123;&#125;\n职业资格: &#123;&#125;&quot;.format(result[11], result[7]))</span></span><br><span class="line">		outsheet.write(Index, <span class="number">0</span>, payload[<span class="string">&#x27;Name&#x27;</span>])</span><br><span class="line">		outsheet.write(Index, <span class="number">1</span>, payload[<span class="string">&#x27;CID&#x27;</span>])</span><br><span class="line">		outsheet.write(Index, <span class="number">2</span>, result[<span class="number">7</span>])</span><br><span class="line">		outsheet.write(Index, <span class="number">3</span>, result[<span class="number">11</span>])</span><br><span class="line">		Index += <span class="number">1</span></span><br><span class="line">		<span class="comment"># print(&quot;Index: &#123;&#125;&quot;.format(Index))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lookup</span>(<span class="params">i, outsheet</span>):</span></span><br><span class="line">	p_utf8 = urllib.parse.urlencode(payload, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">	<span class="comment"># print(p_utf8)</span></span><br><span class="line">	res = requests.post(url, data=p_utf8, headers=phead, timeout=timeOut, allow_redirects=<span class="literal">True</span>)</span><br><span class="line">	parse(i, res.text, outsheet)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">	infile = <span class="built_in">input</span>(<span class="string">&quot;请输入源文件名: &quot;</span>)</span><br><span class="line">	workbook = xlrd.open_workbook(infile)</span><br><span class="line">	sheet1 = workbook.sheets()[<span class="number">0</span>]</span><br><span class="line">	nrows = sheet1.nrows</span><br><span class="line">	print(<span class="string">&quot;数据行数: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(nrows-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">	output = xlwt.Workbook()</span><br><span class="line">	outsheet = output.add_sheet(<span class="string">&#x27;结果&#x27;</span>)</span><br><span class="line">	outsheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">	outsheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;身份证号&quot;</span>)</span><br><span class="line">	outsheet.write(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&quot;职业资格&quot;</span>)</span><br><span class="line">	outsheet.write(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&quot;证书编号&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows-<span class="number">1</span>):</span><br><span class="line">		payload[<span class="string">&#x27;Name&#x27;</span>] = sheet1.row_values(i+<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">		payload[<span class="string">&#x27;CID&#x27;</span>] =  sheet1.row_values(i+<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">		lookup(i+<span class="number">1</span>, outsheet)</span><br><span class="line">	</span><br><span class="line">	output.save(<span class="string">&quot;查询结果.xls&quot;</span>)</span><br><span class="line">	print(<span class="string">&quot;结束,共有&#123;&#125;条结果&quot;</span>.<span class="built_in">format</span>(Index-<span class="number">1</span>))</span><br><span class="line">	os.system(<span class="string">&quot;pause&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-生成可执行文件"><a href="#2-生成可执行文件" class="headerlink" title="2. 生成可执行文件"></a>2. 生成可执行文件</h3><p>这里用的是Python的<code>pyinstaller</code>工具，需要使用pip下载。</p>
<p>在实际使用中遇到了点困难：<code>pyinstaller.exe</code>所在的路径不在PATH当中，所以还要先将对应的路径添加到环境变量中。</p>
<p>之后运行<code>pyinstaller -F spider.py</code>. 可以在<code>dist</code>路径下找到可执行文件。</p>
<h3 id="3-困难"><a href="#3-困难" class="headerlink" title="3. 困难"></a>3. 困难</h3><p>最大的困难是在测试POST表单数据时的编码问题。服务器接受的表单数据需要是URL编码的，所以需要调用<code>urllib.parse.urlencode()</code>方法(<code>urllib3</code>是这样的，但是<code>urllib</code>的使用方法是<code>urllib.urlencode()</code>).</p>
<p>其次，我还复习了<code>xpath</code>的基本语法，用于解析HTML中的标签。</p>
<hr>
<h3 id="新问题"><a href="#新问题" class="headerlink" title="新问题"></a>新问题</h3><p>今天实战时发现了问题：当查询了1000条左右的数据后，程序崩溃了。进一步查询发现，原来是网站拒绝了我的访问。进一步查看源代码发现，提交的表单数据中还包含了我的IP地址。看来是网站采取了反爬虫手段，封禁了我的IP(QAQ)，希望不是永久封……</p>
<p>我上网查了一下解决方法，大概有以下三种：</p>
<ol>
<li>  维护代理IP池，每次提交数据随机挑选IP。</li>
<li>  延长每次提交之间的间隔。</li>
<li>  更换<code>User-Agent</code>标签的内容。</li>
</ol>
<p>经过实际测试，只有第一种是实际有效的。</p>
]]></content>
      <categories>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>Spider</tag>
      </tags>
  </entry>
</search>
